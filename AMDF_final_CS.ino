#include <LiquidCrystal.h>
const int rs = 12, en = 11, d4 = 5, d5 = 4, d6 = 3, d7 = 2;
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);

unsigned long t1,t2,t3,t4;
const int Fs1=125;
const int CR=2;
const int p=6; //length of a and b (order of filter+1)
float b[6]={0.864246524017246,-4.32123262008623,8.64246524017246,-8.64246524017246,4.32123262008623,-0.864246524017246};
float a[6]={1,-4.70835055262605,8.87551850311413,-8.37268603379321,3.95242919071962,-0.746904488298868};
const float Fs=(Fs1/2);
const int t=5;
const int N=Fs1*t;
const int M=Fs*t;
int i,PR,SQ=1;

float x1[N]={0.880069098771052,0.90345036329329,0.892922730707683,0.86251560441107,0.816519514656174,0.759356641841622,0.696913671656484,0.632335477198217,0.562337932947252,0.502244400895912,0.437705654762797,0.38521352625239,0.326058518830691,0.281134874587931,0.232508873941401,0.188564410825094,0.150177735402934,0.130459771252247,0.101719293407639,0.0754178641456282,0.0357897903182435,0.0166928361746143,-0.0126896257016285,-0.0353811263675892,-0.0654940754919738,-0.077893306091003,-0.104323603746141,-0.11421031089733,-0.137002522814733,-0.140749894377676,-0.151813032835831,-0.170513462455786,-0.158188572276224,-0.164795514776859,-0.156527403542017,-0.171060192802026,-0.163512585770629,-0.141171974040922,-0.146363021662235,-0.126903616654048,-0.119687165983727,-0.108937829307143,-0.110622584019511,-0.0953235305814348,-0.0928057341171312,-0.087859860971997,-0.0726454807177395,-0.0794670395596983,-0.0674544893870334,-0.078452476107781,-0.0768469608331721,-0.0803167344971404,-0.0882409424345579,-0.0966572650935028,-0.0983266124591222,-0.105123649592663,-0.115044016369898,-0.123261391070403,-0.137789300569899,-0.13695822519615,-0.171781200993216,-0.173351004077238,-0.17026854292081,-0.193062084687946,-0.206267619040554,-0.215153040083107,-0.2289145069913,-0.245578252607003,-0.258885472164064,-0.252858068961533,-0.271411743964015,-0.279312569188977,-0.294298925586926,-0.295011835927043,-0.303267203248225,-0.314935843360391,-0.3234144346087,-0.32916033832713,-0.345366407302011,-0.356517546893635,-0.361670965800887,-0.366075756358815,-0.366265449389782,-0.374582307070837,-0.378105054204234,-0.385244516523416,-0.38843311397535,-0.395007514925725,-0.402165202707142,-0.407714203412253,-0.407249009213766,-0.413493495505478,-0.422085113606188,-0.429675457545888,-0.428795422864428,-0.421687111583357,-0.369065339396831,-0.293437040717073,-0.200259794918071,-0.0825725926953002,0.0336851470154295,0.164185544296924,0.287886880192785,0.434001459743298,0.578743877807093,0.701983984409425,0.801311057472183,0.875247784421007,0.892149566820076,0.904034581574931,0.886453608922658,0.843885490882766,0.788852507516395,0.731159432829691,0.657056474734039,0.585513708304844,0.51919820371864,0.458475876328821,0.400898464503374,0.337305294905332,0.284545212288571,0.234971934230932,0.198731347831818,0.149266441528058,0.11848029018822,0.096458536181084,0.0531483404918363,0.0342500382516605,0.0146307638851138,-0.0175016039702876,-0.0381567189150711,-0.0696657992775995,-0.0974365019492421,-0.106153167824446,-0.128783944063818,-0.145832065776241,-0.157888015295611,-0.177559502146559,-0.15931649563848,-0.156934065450984,-0.175377216039582,-0.17489822708999,-0.163692581000099,-0.145344226406266,-0.157024687177026,-0.134987990445514,-0.130410401210676,-0.129226064950562,-0.108965660164844,-0.100673216982096,-0.0878993589506323,-0.0845986024891879,-0.0740492943389827,-0.0747425536964686,-0.0729475195373185,-0.069371103551242,-0.081288126681396,-0.0818483248812144,-0.0845667247907502,-0.0863021583523958,-0.0936645805798093,-0.0955694089376285,-0.108534119596851,-0.117590839236202,-0.133552862464369,-0.149170530390198,-0.143672840240293,-0.177467562594491,-0.174147852337388,-0.177328405533282,-0.195294096613754,-0.208084767343088,-0.213454862147602,-0.225162437800221,-0.245141624173217,-0.260770975367856,-0.255209580829205,-0.277097764429758,-0.284896435838542,-0.296730684541481,-0.29728151237344,-0.315701588858025,-0.316260040156527,-0.321501731159438,-0.332600849632495,-0.349459728932384,-0.34856483019101,-0.360921544034219,-0.365543817799583,-0.368265287421825,-0.369788767383689,-0.38369965335643,-0.382869281423715,-0.396784909431117,-0.401689144765936,-0.403918832185612,-0.407991025436235,-0.414109783157049,-0.41655928974663,-0.427591679590857,-0.424647543226908,-0.423926587303677,-0.389507127773994,-0.327758849447088,-0.238906487431839,-0.127454723512688,-0.0281364361553132,0.0863582746490795,0.226632870285973,0.366307521531171,0.507974962016994,0.636423273667315,0.741170495532641,0.815972078563158,0.855688172580961,0.865840958977561,0.858108432326389,0.824087376120298,0.776412278508422,0.708824527588011,0.660138940155699,0.593317250680342,0.521938848142919,0.467932433915829,0.401168143283768,0.356824636022837,0.289331163443006,0.255382132881295,0.20696061490467,0.173988914527167,0.144609743909191,0.100510244176194,0.0816794622457048,0.0470499040175419,0.014496107095608,-0.0161633271361882,-0.0488002308623885,-0.0673596904060524,-0.0961411915616201,-0.117422758247245,-0.126425489774669,-0.160169232737944,-0.151532885097373,-0.178631503696781,-0.184853368752078,-0.171771943569369,-0.175943917106086,-0.180683318167669,-0.182748453328167,-0.16773908065097,-0.142397264416375,-0.155436657597043,-0.141503391609503,-0.128520277718905,-0.120929597487307,-0.101968527866922,-0.104593188405791,-0.0775385740538476,-0.0845245880535259,-0.0736456423722729,-0.0665068871380648,-0.0627323146623924,-0.0674426654850191,-0.075919749884129,-0.0696453513416303,-0.0759911433441863,-0.080916193362887,-0.0859742233942962,-0.0973705183791939,-0.109551489867393,-0.117589515532155,-0.134214071479929,-0.138242656332331,-0.158369210790027,-0.164668656513535,-0.165882696235248,-0.190334286928346,-0.205996307613091,-0.215343071332075,-0.229406166754361,-0.232659189386474,-0.255632102182055,-0.270850948879378,-0.265150807935395,-0.283555501098241,-0.289073206373197,-0.30159599731038,-0.309707048904128,-0.316851285565199,-0.326561689486196,-0.331105262939895,-0.346794592769436,-0.350376284358227,-0.355258281641762,-0.356594361813151,-0.361833998425796,-0.365338896490662,-0.366805251320433,-0.378236156559635,-0.381703897393173,-0.381284605304167,-0.382314573686905,-0.388415958743999,-0.395052295998616,-0.403952433290992,-0.403096803781435,-0.413375909922901,-0.40969600713319,-0.385168036883342,-0.342420336150775,-0.268970564368522,-0.16709289862155,-0.0578683755384814,0.0635638706901628,0.190890952867534,0.330707921497057,0.47280947937667,0.60779293804052,0.718374060740277,0.81092741150415,0.872905431588493,0.893294790522806,0.893286886503617,0.876892026016476,0.828411867486793,0.777347550688907,0.708661358517841,0.654659220634387,0.589033203509241,0.522144584494332,0.465324792103764,0.392517110531705,0.360725329579476,0.310853615895995,0.266084543281993,0.231051741396753,0.197704683770879,0.166750309142457,0.125360799226453,0.10551677866931,0.0720877897050141,0.0534953206881986,0.0264903311335826,-0.00266430884787378,-0.0217189095215395,-0.0434203139697171,-0.0662531459724303,-0.0846797789218441,-0.0947920535277931,-0.106806990371238,-0.118264327919747,-0.123127070350674,-0.123858129437138,-0.126291198029352,-0.123498462531512,-0.109395318371656,-0.108178721543934,-0.0892818328947131,-0.0710861519527149,-0.0561348534650304,-0.0512274270457856,-0.0358428185310615,-0.0284746485634762,-0.00500500150550151,-0.000187328151056816,0.00191766913679372,0.00424518570510199,0.00395477584661815,0.00635251111050975,0.00588358959423907,0.00459856989876522,0.00421937196762558,-0.00285531708841369,-0.00539455028259213,-0.016938145877218,-0.0340446130577278,-0.0440363840780675,-0.0574276234780597,-0.0728431071303583,-0.0828231624966717,-0.0936469709855944,-0.109262004558582,-0.122253006488281,-0.129514724492074,-0.150250054379042,-0.164215876668046,-0.161139586564011,-0.191748155555023,-0.201699659418706,-0.216938551579091,-0.225199232723967,-0.230430308673762,-0.229918235192489,-0.245154903946864,-0.270765055468656,-0.260733132099409,-0.262610573298542,-0.286344292735766,-0.276744720404481,-0.29332076481365,-0.294089114672087,-0.298095058097725,-0.299658726117928,-0.305210193872992,-0.314705192197834,-0.31513046881849,-0.318830258018898,-0.324549814727416,-0.321605432781408,-0.326737389650759,-0.332717288575578,-0.330223330565515,-0.338731856471842,-0.328654627876628,-0.301453392559227,-0.237446261206447,-0.147724750970915,-0.0632228844049199,0.0671067112705085,0.186230591281983,0.322925772555046,0.476573077066095,0.624285290162073,0.758894073492161,0.859734433867149,0.945225472930948,0.983865173384676,1,0.994203621141295,0.958305103948012,0.917128388611523,0.854676670020584,0.783617688583222,0.726260083782649,0.671416744214445,0.594527749194132,0.545559358043992,0.478616526569561,0.427761883933446,0.382182212742265,0.336459653653188,0.314105765872299,0.277303324638616,0.252752931339607,0.22244165935876,0.196747317118771,0.165670592922112,0.131978780064399,0.11660465796751,0.0870299445743181,0.0526554545254896,0.0464744619270752,0.0173703956120912,-0.00290019424093351,-0.0262295826850313,-0.034119528250641,-0.0432623793071162,-0.0502954285765781,-0.0587724009078398,-0.0602366769093245,-0.0580921373376719,-0.063735185953955,-0.0553903475131931,-0.0534830481835149,-0.038394906522937,-0.0271441067721497,-0.0258009333386539,-0.0135015917003821,0.00169037398522846,0.00133402869712847,0.00999811040399545,0.0123583245218752,0.0235464393507779,0.018564634752357,0.0260418031299401,0.0161014858043772,0.0205422038758214,0.00985326347888195,0.013221698969767,-0.00455500756979666,-0.00792470266641527,-0.0236666802812405,-0.0386499255885236,-0.0504494917604392,-0.0606304400987412,-0.0738113027103847,-0.0787885665474765,-0.0959386802443817,-0.103086840680833,-0.13277899333348,-0.131100683148684,-0.150023693840897,-0.17443898696155,-0.173505374509227,-0.181976211313334,-0.182399648757805,-0.20931195041492,-0.224252414819633,-0.239002453338196,-0.25302927489344,-0.24518768577431,-0.273271785740745,-0.2779137153042,-0.284745072681332,-0.296568415570723,-0.297543135513697,-0.303977229807643,-0.303978750153805,-0.322894922172752,-0.313856113560645,-0.327198381678473,-0.32062578371705,-0.335920656348784,-0.33423084983769,-0.33275472158307,-0.337897294390804,-0.349348090285263,-0.351087642582874,-0.352688528490769,-0.352602717996687,-0.357513386620031,-0.357465170925005,-0.361499945163157,-0.355086000262516,-0.330763733061046,-0.277998964875385,-0.192308956098738,-0.0881099868811708,0.0245240872101107,0.156787973740914,0.288550717726681,0.425222711968864,0.591597669476885,0.716642203208648,0.843622341425793,0.928010676024524,0.988712219071266,0.995812847850265,0.988456452044473,0.954292197021737,0.905359744848137,0.844116231276215,0.778982986072774,0.719370927568532,0.648081999101247,0.582844322673982,0.515437948472471,0.452094129838268,0.40796277558009,0.349382600719694,0.300216338259373,0.262337020462903,0.231553131797114,0.19844225432078,0.17666185701084,0.153656013735606,0.111769223205002,0.0915551146942182,0.0663437868073807,0.0491993324754843,0.0177278234646978,-0.00603881943877844,-0.0299431036234904,-0.0473842281868837,-0.0667354867201067,-0.0771702533630721,-0.089306059716428,-0.0871247643270317,-0.0916011779388172,-0.0924749691574653,-0.0918726354620827,-0.0848559618877183,-0.0828615880532502,-0.07911127790236,-0.0614005306886102,-0.0573447602841372,-0.0432933183628397,-0.0279533062102487,-0.026606026098171,-0.0178064759152088,-0.00745172589218011,-0.0106989175828524,0.00106555388267574,0.00504444962698067,-0.00132571483401611,-0.0027449795824627,0.00241271787055448,-0.00642840924321382,-0.0110814073499307,-0.0212527549881951,-0.0350780125396549,-0.0420163327407398,-0.0442444531475044,-0.0544087143298214,-0.0734326029021297,-0.0837736912783028,-0.0965714310562612,-0.110034384622126,-0.126114033701284,-0.137709818041631,-0.160304605255769,-0.151796789102481,-0.172809548509276,-0.186126098745363,-0.197047038402875,-0.207209118488996,-0.212611000796771,-0.223091407830048,-0.254590059563051,-0.259455605073736,-0.262409144953707,-0.286728891323894,-0.287159061030678,-0.304046633929565,-0.311935603035504,-0.30815682164825,-0.321021445246739,-0.330535873266404,-0.335397072753635,-0.340874401660372,-0.337340175064378,-0.347579733963244,-0.349701706622654,-0.353811127888017,-0.358270565862649
}; //original signal
//float x1[N];  //real-time sensing
float x2[N]; //CS signal
float x3[N]; //Normalsed signal
float x4[N];  //Filtered signal
float x5[N];  // Normalized signals
const int k=250; // length of partial AMDF
float th=-0.25; //Threshold for threshold crossing of derivative
int ZC[M];
int AMDF_zc[k]; //Threshold crossings of AMDF_ds
int num,N1,N2,Z;     //Number of th crossings
float AMDF_val[k];     //AMDF function
float AMDF_d[k];   //Derivative of AMDF
float AMDF_neg[k];   //Negative of AMDF
float AMDF_ds[k];  //Smoothed derivative of AMDF
// float der[k],der1[k],der2[k];
float xd[M - 1], xs[M- 1];

void setup() {
  Serial.begin(9600);
  Serial1.begin(9600);
  
//  lcd.begin(16, 4);
//  // Print a message to the LCD.
//  lcd.setCursor(0,1);
//  lcd.print("Start!!");
//  delay(1000);
}

void loop() {
  t1=micros();

// //Real-time sensing
//    i=0;
//    while(i<samples)
//    {
//      x1[i]=analogRead(A0);
//      delay(8);
//      i=i+1;
//    }

  DBBD(x1,N,CR,x2);
//  normalize_amplitude(x2, M, x3);
  filtfilt(x2, M, a, b, p, x4);

  derivative(x4, M, xd);
  MAF(xd, M - 1, 3, xs);
  int NPZCR = msm_zerocros(xs, M - 1, ZC);

  t2 = micros();
  AMDF(x4, M, k, AMDF_val);
  t3 = micros();
  mean_removal(AMDF_val, k, AMDF_val);
  normalize_amplitude(AMDF_val, k, AMDF_val);
  for (i = 0; i < k; i++) AMDF_neg[i] = -AMDF_val[i];
  derivative(AMDF_neg, k, AMDF_ds);
  k_lag(AMDF_ds, k, 5, AMDF_ds);
  normalize_amplitude(AMDF_ds, k, AMDF_ds);

  num = neg_th_cross(AMDF_ds, th, k, AMDF_zc);
  if (num < 2) {
    SQ = 1;
    PR = 0;
  } else {
    minima_correction(AMDF_val, k, AMDF_zc, num, AMDF_zc);
    PR = ceil(Fs * 60.0 / (AMDF_zc[0] + 1));
  }

  t4 = micros();
  N1 = neg_th_cross(x4, 0.1, M, ZC);
  N2 = neg_th_cross(x4, -0.1, M, ZC);
  Z = abs(N1 - N2);

  // Magnitude computation
  float max_val = x4[0], min_val = x4[0];
  for (int i = 1; i < M; i++) {
    if (x4[i] > max_val) max_val = x4[i];
    if (x4[i] < min_val) min_val = x4[i];
  }
  float mag = max_val - min_val;

  // Signal Quality Check
  if (NPZCR > 8 && NPZCR <= 38) SQ = 0;
  else if (NPZCR > 38 && NPZCR < 168) SQ = 1;
  else if (num < 2 || PR < 30 || PR > 300) SQ = 1;
  else if ((AMDF_val[AMDF_zc[0]] > -0.13 && AMDF_val[AMDF_zc[1]] > -0.35) && mag > 64) SQ = 1;
  else if ((AMDF_val[AMDF_zc[0]] < -0.37 && AMDF_val[AMDF_zc[1]] < -0.34) && mag <= 9) SQ = 0;
  else {
    for (int i = 0; i < num - 2; i++) {
      int d1 = AMDF_zc[i + 1] - AMDF_zc[i];
      int d2 = AMDF_zc[i + 2] - AMDF_zc[i + 1];
      int dist = abs(d2 - d1);
      if (dist > 8) {
        SQ = 1;
        break;
      } else {
        SQ = 0;
      }
    }
  }

  // Serial output
  Serial.print("PR is,"); Serial.println(PR);
  Serial.print("Signal Quality is,"); Serial.println(SQ);

  Serial1.print("PR is,"); Serial1.println(PR);
  Serial1.print("Signal Quality is,"); Serial1.println(SQ);

  // LCD Display
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("PR: "); lcd.print(PR);
  lcd.setCursor(0, 1);
  lcd.print("SQ: "); lcd.print((SQ == 0) ? "Good" : "Bad");

  delay(1000);

}

   

// Supporting Functions 

void DBBD(float x[], int N, int CR, float y[]){

//  Function to find CS measurements using DBBD sensing matrix
//  Input: signal x with length N
//  Output: signal y compressed by CR factor
//  New length: M=floor(N/CR)

    int i,j,M,temp;
    M=floor(N/CR);

    for (int j=0;j<M;j++){
      y[j]=0;
      for (int i=0;i<CR;i++){
        temp=j*CR+i;
        y[j]=y[j]+x[temp];
      }
    }
}


void normalize_amplitude(float x[], int N, float y[]) {
  float max_x = fabs(x[0]);
  for (int i = 1; i < N; i++) max_x = max(max_x, fabs(x[i]));
  for (int i = 0; i < N; i++) y[i] = x[i] / max_x;
}

void AMDF(float x[], int N, int M, float y[]) {
  for (int i = 0; i < M; i++) {
    float sum = 0;
    for (int j = 0; j < N - i - 1; j++) sum += fabs(x[j] - x[j + i]);
    y[i] = sum / (N - i - 1);
  }
}

void mean_removal(float x[], int N, float y[]) {
  float sum = 0;
  for (int i = 0; i < N; i++) sum += x[i];
  float avg = sum / N;
  for (int i = 0; i < N; i++) y[i] = x[i] - avg;
}

void k_lag(float x[], int N, int p, float y[]) {
  for (int i = 0; i < p; i++) y[i] = x[p];
  for (int i = p; i < N; i++) y[i] = x[i];
}

int neg_th_cross(float x[], float th, int N, int y[]) {
  int j = 0;
  for (int i = 0; i < N - 1; i++) {
    if (x[i] > th && x[i + 1] <= th) y[j++] = i;
  }
  if (j == 0) {
    y[0] = N - 1;
    return 1;
  }
  return j;
}

void minima_correction(float x[], int N, int loc[], int M, int y[]) {
  for (int i = 0; i < M; i++) {
    float minima = x[loc[i]];
    y[i] = loc[i];
    int start = max(0, loc[i] - 3);
    int end = min(N - 1, loc[i] + 3);
    for (int j = start; j <= end; j++) {
      if (x[j] < minima) {
        minima = x[j];
        y[i] = j;
      }
    }
  }
}

void filtfilt(float x[], int N, float a[], float b[], int p, float y[]) {
  float z[N];
  filter(x, N, a, b, p, z);
  for (int i = 0; i < N; i++) y[i] = z[N - i - 1];
  filter(y, N, a, b, p, z);
  for (int i = 0; i < N; i++) y[i] = z[N - i - 1];
}

void filter(float x[], int N, float a[], float b[], int p, float y[]) {
  for (int i = 0; i < N; i++) {
    float val = 0;
    for (int j = 1; j < p && i >= j; j++) {
      val += b[j] * x[i - j] - a[j] * y[i - j];
    }
    y[i] = b[0] * x[i] + val;
  }
}

void MAF(float x[], int N, int p, float y[]) {
  float a[p], b[p];
  for (int i = 0; i < p; i++) {
    a[i] = (i == 0) ? 1 : 0;
    b[i] = 1.0 / p;
  }
  filtfilt(x, N, a, b, p, y);
}

void derivative(float x[], int N, float y[]) {
  for (int i = 0; i < N - 1; i++) y[i] = x[i + 1] - x[i];
  y[N - 1] = y[N - 2];
}

int msm_zerocros(float* signal, int len, int* locations) {
  int count = 0;
  for (int i = 1; i < len; i++) {
    if (signal[i] * signal[i - 1] <= 0) {
      locations[count++] = i;
    }
  }
  return count;
}
